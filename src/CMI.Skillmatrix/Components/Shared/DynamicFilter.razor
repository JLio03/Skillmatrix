@using CMI.Skillmatrix.Components.DTOs
@using CMI.Skillmatrix.Services
@inject SkillService SkillService

@rendermode InteractiveServer
@attribute [StreamRendering]

@if (Filter != null && skills.Count != 0)
{
    <MudGrid>
        <MudItem xs="3">
            <MudSelect T="string" Required="true" Label="Skills" @bind-Value="Filter.SkillName" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Filled" Margin="Margin.Dense" Class="ml-2" Style="width: 20%">
                @foreach (var skill in skills)
                {
                    <MudSelectItem Value="skill.SkillName">@skill.SkillName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="3">
            <MudNumericField Required="true" @bind-Value="Filter.MinRating" Label="Min Einschätzung" Variant="Variant.Filled" Margin="Margin.Dense" Min="0" Max="4" Class="ml-2" />
        </MudItem>
        <MudItem xs="3">
            <MudNumericField @bind-Value="Filter.MaxRating" Label="Max Einschätzung" Variant="Variant.Filled" Margin="Margin.Dense" Min="0" Max="4" Class="ml-2" />
        </MudItem>
        <MudItem xs="3">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="RemoveFilter" Class="ml-2 mt-2 mb-2">Entfernen</MudButton>
        </MudItem>
    </MudGrid>
}

@code {
    List<SkillDTO> skills = new();

    [Parameter]
    public FilterModel Filter { get; set; }

    [Parameter]
    public EventCallback OnRemove { get; set; }

    async Task RemoveFilter()
    {
        await OnRemove.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        skills = await SkillService.GetAllSkillsAsync();
        Console.WriteLine(skills.Count);
        Task.WaitAll();
    }
}